import java.nio.charset.StandardCharsets

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'

def localPropsFile = rootProject.file("local.properties");
def localProperties = new Properties()
if (localPropsFile.exists()) {
    localProperties.load(new InputStreamReader(new FileInputStream(localPropsFile), StandardCharsets.UTF_8))
}

configurations {
    ktlint
}

android {
signingConfigs {

   release {
       storeFile file(RELEASE_STORE_FILE)
       storePassword RELEASE_STORE_PASSWORD
       keyAlias RELEASE_KEY_ALIAS
       keyPassword RELEASE_KEY_PASSWORD

       // Optional, specify signing versions used
       v1SigningEnabled true
       v2SigningEnabled true
   }
}
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "org.wildaid.ofish"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 5
        versionName "0.32.y"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField "String", "REALM_APP_ID", "\"${localProperties.getProperty("realm_app_id", "CHANGE_THIS_APP_ID")}\""
            buildConfigField "String", "REALM_PASSWORD", "\"${localProperties.getProperty("realm_password", "")}\""
            buildConfigField "String", "REALM_USER", "\"${localProperties.getProperty("realm_user", "")}\""
            buildConfigField "String", "REALM_URL", "\"${localProperties.getProperty("realm_url", "")}\""
        }

        debug {
            applicationIdSuffix ".debug"
            buildConfigField "String", "REALM_APP_ID", "\"${localProperties.getProperty("realm_app_id", "CHANGE_THIS_APP_ID")}\""
            buildConfigField "String", "REALM_PASSWORD", "\"${localProperties.getProperty("realm_password", "")}\""
            buildConfigField "String", "REALM_USER", "\"${localProperties.getProperty("realm_user", "")}\""
            buildConfigField "String", "REALM_URL", "\"${localProperties.getProperty("realm_url", "")}\""
        }
    }

    dataBinding {
        enabled = true
        enabledForTests = true
    }

//  For Kotlin projects
    kotlinOptions {
        jvmTarget = "1.8"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
// TODO:
// see https://stackoverflow.com/questions/65322892/cannot-set-non-nullable-livedata-value-to-null
// fixed in jetpack lifecycle 2.4.0, then don't need this workaround
  lintOptions {
    disable 'NullSafeMutableLiveData'
  }
}

dependencies {
    // Local dependencies
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.4.31"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // Android
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation 'androidx.activity:activity-ktx:1.2.3'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.fragment:fragment-ktx:1.3.4'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'
    implementation "androidx.viewpager2:viewpager2:1.0.0"

    implementation 'com.google.android.material:material:1.4.0-beta01'

    // Google Maps
    implementation 'com.google.android.gms:play-services-location:18.0.0'
    implementation 'com.google.android.gms:play-services-maps:17.0.1'

    // Glide  - Image loader library
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    // JUnit test dependencies
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.13.2'

    // Robolectric to run android code and  resources on JVM
    testImplementation 'org.robolectric:robolectric:4.5.1'

    // Android dependencies for unit tests
    testImplementation 'androidx.test:core:1.3.0'

    // Kotlin mock library  Mockk.io
    testImplementation 'io.mockk:mockk:1.10.6'

    // Android test dependencies
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // Kotlin test dependencies
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

    ktlint 'com.pinterest:ktlint:0.40.0'
}

realm {
    syncEnabled = true
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint
