import java.nio.charset.StandardCharsets

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'

def realmPropsFile = rootProject.file("realm.properties");
def realmProperties = new Properties()
realmProperties.load(new InputStreamReader(new FileInputStream(realmPropsFile), StandardCharsets.UTF_8))

def localPropsFile = rootProject.file("local.properties");
def localProperties = new Properties()
if (localPropsFile.exists()) {
    localProperties.load(new InputStreamReader(new FileInputStream(localPropsFile), StandardCharsets.UTF_8))
}

configurations {
    ktlint
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "org.wildaid.ofish"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField "String", "REALM_APP_ID", "\"${realmProperties.getProperty("realm_app_id", "")}\""

            buildConfigField "String", "REALM_PASSWORD", "\"${localProperties.getProperty("realm_password", "")}\""
            buildConfigField "String", "REALM_USER", "\"${localProperties.getProperty("realm_user", "")}\""
            buildConfigField "String", "REALM_URL", "\"${localProperties.getProperty("realm_url", "")}\""
        }

        debug {
            buildConfigField "String", "REALM_APP_ID", "\"${realmProperties.getProperty("realm_app_id", "")}\""

            buildConfigField "String", "REALM_PASSWORD", "\"${localProperties.getProperty("realm_password", "")}\""
            buildConfigField "String", "REALM_USER", "\"${localProperties.getProperty("realm_user", "")}\""
            buildConfigField "String", "REALM_URL", "\"${localProperties.getProperty("realm_url", "")}\""
        }
    }

    dataBinding {
        enabled = true
        enabledForTests = true
    }

//  For Kotlin projects
    kotlinOptions {
        jvmTarget = "1.8"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    def nav_version = "2.3.0"

    // Local dependencies
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Android
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation "androidx.fragment:fragment-ktx:1.2.5"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"
    implementation 'androidx.activity:activity-ktx:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    implementation 'com.google.android.material:material:1.3.0-alpha01'

    // Google Maps
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.gms:play-services-location:17.0.0'

    // Glide  - Image loader library
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    // JUnit test dependencies
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'

    // Robolectric to run android code and  resources on JVM
    testImplementation 'org.robolectric:robolectric:4.3'

    // Android dependencies for unit tests
    testImplementation 'androidx.test:core:1.2.0'

    // Kotlin mock library  Mockk.io
    testImplementation "io.mockk:mockk:1.10.0"


    // Android test dependencies
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    ktlint "com.pinterest:ktlint:0.37.2"
}

realm {
    syncEnabled = true
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint
